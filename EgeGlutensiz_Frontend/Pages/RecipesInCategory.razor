@using EgeGlutensiz_Frontend.Models
@page "/tarifler/{slug}"
@inject HttpClient Http

<PageTitle>Ege Glutensiz | @category?.title</PageTitle>

<nav class="flex w-80 ml-4 mt-8 md:md:ml-8 md:mt-20" aria-label="breadcrumb">
    <ul class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
            <a href="/" class="inline-flex items-center text-sm font-medium text-black hover:underline">
                <svg aria-hidden="true" class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>
                <span><NavLink href="/" Match="NavLinkMatch.All">Ev</NavLink></span>
            </a>
        </li>
        <li>
            <div class="flex items-center">
                <svg aria-hidden="true" class="w-6 h-6 text-black" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
                <span class="ml-1 text-sm font-medium text-black md:ml-2 hover:underline"><NavLink href="/tarifler" Match="NavLinkMatch.All">Tarifler</NavLink></span>
            </div>
        </li>
        <li aria-current="page">
            <div class="flex items-center">
                <svg aria-hidden="true" class="w-6 h-6 text-black" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
                <span class="ml-1 text-sm font-bold text-black md:ml-2">@category?.title</span>
            </div>
        </li>
    </ul>
</nav>

<section class="mb-40">
    <h1 class="text-4xl lg:text-5xl font-extrabold text-center mt-3 mb-20">@category?.title</h1>
    <!-- Cards container -->
    <div class="mb-[12rem] md:mb-[2rem] flex justify-center gap-6 p-4 flex-wrap md:w-[700px] lg:w-[90%] max-w-[1200px] mx-auto">
        @if (recipesInCategory != null)
        {

            @foreach (var recipe in recipesInCategory)
            {
                <RecipeCategoryCard recipe="@recipe"></RecipeCategoryCard>
            }
        }
    </div>
</section>

@code {
    List<RecipeModel.Root> recipesInCategory = new List<RecipeModel.Root>();
    RecipeCategoryModel.Root category { get; set; }

    // Skapa en property för att kunna spara sluggen
    [Parameter]
    public string slug { get; set; }

    // Get all recipes belonging to a specific category
    public async Task<List<RecipeModel.Root>> GetAllRecipesInCategory()
    {
        var recipes =  await Http.GetFromJsonAsync<List<RecipeModel.Root>>($"http://localhost:20990/api/recipes_category/{slug}");
        return recipes != null ? recipes : new List<RecipeModel.Root>();
    }

    public async Task<RecipeCategoryModel.Root> GetCategory()
    {
        var category = await Http.GetFromJsonAsync<RecipeCategoryModel.Root>($"http://localhost:20990/api/category/{slug}");
        return category;
    }

    public bool shouldRender = false;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        recipesInCategory = await GetAllRecipesInCategory();
        category = await GetCategory();
        shouldRender = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        recipesInCategory = await GetAllRecipesInCategory();
        category = await GetCategory();

        shouldRender = true;

    }
}